Files 
=====
	test_luna/*.lua : self-contained examples (run make.sh to run) 
			These examples use CMake. If you don't want to use CMake, see "examples/gen.sh". 

	luna_gen.lua:  the code generator. 

	mylib*.lua: the code generator depends on these files, but output codes do not.
			luna.h/cpp: the output code depends only on these files. 
			luna.h is worth reading (at least lunaStack class).

	examples/*.lua : real-world examples that use all available functionalities (run gen.sh to convert.)
				   The real-world examples do not run on your system because of missing dependencies.
	
	see examples/README for details. This file explains how to call a lua function from c.

Supported types
=============
	class   ( corresponds to a userdata that has a metatable )
	module  ( corresponds to a namespace in cpp and a table in lua. Multiple modules can have the same name. )

Supported class properties
======================
	name
	className
	inheritsFrom
	ctors
	wrapperCode : custom function definitions (any valid c++ code which goes into the output cpp file.)
	decl : custom class declarations (any valid c++ code which goes into the output header file)
	globalWrapperCode :custom function definitions (any valid c++ code which goes into the output cpp file.)
	ifdef
	ifndef
	if_
	isLuaInheritable
	enums
	staticMemberFunctions
	memberFunctionsFromFile
	memberFunctions
	isExtendableFromLua : for c++ inheritance from lua. See test_inheritance.lua
	properties 
	read_properties
	write_properties
	customFunctionsToRegister : luna-gen can register a custom function 'int funcName(lua_State* L)'

	Search for keyword in examples to see its usage, or ask me so that I can update this document. 

Notes for luabind users
===================

>- **luabind:**
		luabind::def("createVRMLskin", &RE::createVRMLskin,luabind::adopt(luabind::result))
- **luna-gen: **
		PLDPrimVRML* RE::createVRMLskin(VRMLloader*pTgtSkel, bool bDrawSkeleton) @ ;adopt=true; 

----------
>- **luabind:**
		.enum_("constants")
		[
			luabind::value("EULER",OpenHRP::DynamicsSimulator::EULER)
		]
- **luna-gen:**
	enums={
	{"EULER", "(int)OpenHRP::DynamicsSimulator::EULER"}, 
	}

----------
>- **luabind:**
		.scope_[..] 
- **luna-gen:**
        staticMemberFunctions={[[..]]}

----------

>- **luabind:**
		#ifndef AAA
			luabind::def("abc"...)
		#endif
- **luna-gen:**
		void abc() @ ;ifndef=AAA;

---------- 
>- **luabind:**
		#ifndef AAA
		    luabind::class_<asdf>("asdf")[...]
		#endif
- **luna-gen:**
       {
		   name='asdf',
		   ifndef='AAA',
	   }
		   


taesoobear@gmail.com


